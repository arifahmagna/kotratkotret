class Application {
    constructor() {
        this.selectedServiceType = null;
        this.selectedPaymentMethod = null;
        this.cartItems = [];
        this.cartSubtotal = 0;

        this.init();
    }

    init() {
        this.setupSidebarNavigation();
        this.setupCategoryFilter();
        this.setupCartActions();
        this.setupServiceTypeSelection();
        this.setupPaymentMethodSelection();
        this.setupCheckout();
        this.setupChangeCalculation();
        this.updateTimestamp();
        this.loadStatistics();
        this.setupSidebarNavigation();
        this.setupMobileNavbar();
    }

 // Sidebar Navigation untuk Desktop
 setupSidebarNavigation() {
    document.querySelectorAll('.sidebar-icon').forEach(icon => {
        icon.addEventListener('click', () => {
            const targetSection = icon.getAttribute('data-icon');

            // Reset semua sidebar ikon dan konten
            document.querySelectorAll('.sidebar-icon').forEach(el => el.classList.remove('active'));
            document.querySelectorAll('.content-section').forEach(section => section.classList.remove('active'));

            // Aktifkan sidebar ikon yang dipilih
            icon.classList.add('active');

            // Tampilkan konten yang sesuai
            const sectionToShow = document.getElementById(targetSection);
            if (sectionToShow) sectionToShow.classList.add('active');
        });
    });
}

    // Navbar Mobile
    setupMobileNavbar() {
        document.querySelectorAll('.mobile-icon').forEach(icon => {
            icon.addEventListener('click', () => {
                const targetSection = icon.getAttribute('data-icon');

                // Reset semua mobile ikon dan konten
                document.querySelectorAll('.mobile-icon').forEach(el => el.classList.remove('active'));
                document.querySelectorAll('.content-section').forEach(section => section.classList.remove('active'));

                // Aktifkan mobile ikon yang dipilih
                icon.classList.add('active');

                // Tampilkan konten yang sesuai
                const sectionToShow = document.getElementById(targetSection);
                if (sectionToShow) sectionToShow.classList.add('active');
            });
        });
    }
    // Filter Kategori
    setupCategoryFilter() {
        const navItems = document.querySelectorAll('.nav-item');
        const dishes = document.querySelectorAll('.dish-card');

        navItems.forEach(item => {
            item.addEventListener('click', event => {
                event.preventDefault();
                const category = item.getAttribute('data-category');

                dishes.forEach(dish => {
                    dish.style.display = (category === 'All' || dish.getAttribute('data-category') === category) ? 'block' : 'none';
                });

                navItems.forEach(nav => nav.classList.remove('active'));
                item.classList.add('active');
            });
        });
    }

    // Fungsi Keranjang Belanja
    setupCartActions() {
        const addCartButtons = document.querySelectorAll('.add-cart-btn');
        const cartItemsContainer = document.getElementById('cart-items');

        addCartButtons.forEach(button => {
            button.addEventListener('click', (event) => {
                const dishCard = event.target.closest('.dish-card');
                const dishName = dishCard.querySelector('h3').textContent;
                const dishPrice = parseInt(dishCard.querySelector('.price').textContent.replace('Rp.', '').replace(',', '').trim());
                const dishImg = dishCard.querySelector('.dish-img').src;

                const item = { name: dishName, price: dishPrice, img: dishImg };
                this.cartItems.push(item);

                this.renderCartItem(cartItemsContainer, item);
                this.updateCartSubtotal(dishPrice);
            });
        });
    }

    renderCartItem(container, item) {
        const cartItem = document.createElement('div');
        cartItem.classList.add('cart-item');
        cartItem.innerHTML = `
            <img src="${item.img}" alt="${item.name}">
            <div>
                <h4>${item.name}</h4>
                <p class="price">Rp. ${item.price.toLocaleString('id-ID')}</p>
            </div>
            <button class="remove-item-btn">
                <i class="ph ph-trash"></i>
            </button>
        `;
        container.appendChild(cartItem);

        // Event Listener untuk Hapus Item
        cartItem.querySelector('.remove-item-btn').addEventListener('click', () => {
            container.removeChild(cartItem);
            this.removeCartItem(item.price);
        });
    }

    updateCartSubtotal(amount) {
        this.cartSubtotal += amount;
        document.getElementById('cart-subtotal').textContent = `Rp. ${this.cartSubtotal.toLocaleString('id-ID')}`;
    }

    removeCartItem(amount) {
        this.cartSubtotal -= amount;
        document.getElementById('cart-subtotal').textContent = `Rp. ${this.cartSubtotal.toLocaleString('id-ID')}`;
    }

    // Pilihan Dine In / Take Away
    setupServiceTypeSelection() {
        document.querySelectorAll('.payment-option[data-type]').forEach(option => {
            option.addEventListener('click', (event) => {
                const serviceType = option.getAttribute('data-type');
                this.toggleSelection(option, serviceType, 'selectedServiceType');
            });
        });
    }

    // Pilihan Metode Pembayaran
    setupPaymentMethodSelection() {
        document.querySelectorAll('.payment-option[data-method]').forEach(option => {
            option.addEventListener('click', (event) => {
                const paymentMethod = option.getAttribute('data-method');
                this.toggleSelection(option, paymentMethod, 'selectedPaymentMethod');
            });
        });
    }

    toggleSelection(option, value, stateKey) {
        if (this[stateKey] === value) {
            this[stateKey] = null;
            option.classList.remove('active');
        } else {
            this[stateKey] = value;
            document.querySelectorAll(`.payment-option[data-${stateKey === 'selectedServiceType' ? 'type' : 'method'}]`).forEach(opt => opt.classList.remove('active'));
            option.classList.add('active');
        }
    }

    // Checkout
    setupCheckout() {
        document.querySelector('.checkout-btn').addEventListener('click', () => {
            const subtotal = this.cartSubtotal;
            const payment = parseInt(document.getElementById('customer-payment').value.trim()) || 0;

            if (!this.selectedServiceType || !this.selectedPaymentMethod) {
                alert('Please select both Service Type and Payment Method.');
                return;
            }

            if (payment >= subtotal) {
                const change = payment - subtotal;
                alert(`Checkout successful using ${this.selectedPaymentMethod.toUpperCase()}! Change: Rp. ${change.toLocaleString('id-ID')}`);
                
                // Reset cart
                this.resetCart();
            } else {
                alert('Insufficient payment. Please enter the correct amount.');
            }
        });
    }

    // Perhitungan Kembalian
    setupChangeCalculation() {
        const customerPaymentInput = document.getElementById('customer-payment');
        const changeAmount = document.getElementById('change-amount');
        const cartSubtotal = document.getElementById('cart-subtotal');

        customerPaymentInput.addEventListener('input', () => {
            const subtotal = this.parseCurrency(cartSubtotal.textContent);
            const payment = parseInt(customerPaymentInput.value.trim()) || 0;

            const change = payment - subtotal;

            if (change >= 0) {
                changeAmount.textContent = `Rp. ${change.toLocaleString('id-ID')}`;
            } else {
                changeAmount.textContent = 'Rp. 0';
            }
        });
    }
    
    resetCart() {
        this.cartItems = [];
        this.cartSubtotal = 0;
        document.getElementById('cart-items').innerHTML = '';
        document.getElementById('cart-subtotal').textContent = 'Rp. 0';
        document.getElementById('customer-payment').value = '';
        document.getElementById('change-amount').textContent = 'Rp. 0';
        this.selectedServiceType = null;
        this.selectedPaymentMethod = null;
        document.querySelectorAll('.payment-option').forEach(option => option.classList.remove('active'));
    }

    parseCurrency(value) {
        return parseInt(value.replace('Rp.', '').replace(/\./g, '').trim()) || 0;
    }

    updateTimestamp() {
        const now = new Date();
        const options = { year: 'numeric', month: 'long', day: 'numeric' };
        const formattedTime = now.toLocaleString('en-US', options);

        document.querySelectorAll('.timestamp').forEach(element => element.textContent = formattedTime);
    }

    loadStatistics() {
        this.updateStats({
            totalEarnings: 5000000,
            weeklySales: 1200000,
            monthlySales: 4500000,
            profit: 2000000,
            salesReport: [
                { date: '2024-11-01', sales: 500000, profit: 200000 },
                { date: '2024-11-02', sales: 450000, profit: 180000 },
                { date: '2024-11-03', sales: 300000, profit: 100000 },
                { date: '2024-11-04', sales: 700000, profit: 350000 }
            ]
        });
    }

    updateStats(data) {
        const updateStat = (id, value) => {
            document.getElementById(id).textContent = `Rp. ${value.toLocaleString('id-ID')}`;
        };

        updateStat('total-earnings', data.totalEarnings);
        updateStat('weekly-sales', data.weeklySales);
        updateStat('monthly-sales', data.monthlySales);
        updateStat('profit', data.profit);

        const reportBody = document.getElementById('sales-report-body');
        reportBody.innerHTML = '';

        data.salesReport.forEach(report => {
            const row = document.createElement('tr');
            row.innerHTML = `
                <td>${report.date}</td>
                <td>Rp. ${report.sales.toLocaleString('id-ID')}</td>
                <td>Rp. ${report.profit.toLocaleString('id-ID')}</td>
            `;
            reportBody.appendChild(row);
        });
    }
}

// Inisialisasi Aplikasi
document.addEventListener('DOMContentLoaded', () => new Application());
